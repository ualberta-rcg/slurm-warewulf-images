name: Build, Scan, and Remediate CIS Image

on:
  push:
    branches-ignore:
      - main
      - compliance-reports

jobs:
  build-scan-remediate:
    runs-on: ubuntu-latest

    env:
      DOCKER_REPO: rkhoja/slurm-node

    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üê≥ Set OS-Specific Directory
        id: os_dir
        run: echo "os_dir=${GITHUB_REF_NAME}" >> $GITHUB_ENV

      - name: üê≥ Build Docker Image
        run: |
          docker build -t $DOCKER_REPO:${GITHUB_REF_NAME} ./${GITHUB_REF_NAME}

      - name: üõ°Ô∏è Run OpenSCAP Scan
        run: |
          docker run --privileged --name openscap-scan $DOCKER_REPO:${GITHUB_REF_NAME} /openscap_scan.sh

      - name: üì§ Extract Scan Report
        run: |
          docker cp openscap-scan:/home/oscap-results.html ./oscap-results.html
          docker cp openscap-scan:/home/oscap-results.xml ./oscap-results.xml

      - name: üîß Run OpenSCAP Remediation
        run: |
          docker commit openscap-scan $DOCKER_REPO:${GITHUB_REF_NAME}-remediated
          docker run --privileged --name openscap-remediate $DOCKER_REPO:${GITHUB_REF_NAME}-remediated /openscap_remediate.sh

      - name: üì§ Extract Remediation Report
        run: |
          docker cp openscap-remediate:/home/oscap-results-remediated.html ./oscap-results-remediated.html

      - name: üìä Upload Compliance Reports as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: openscap-reports-${{ github.ref_name }}
          path: |
            oscap-results.html
            oscap-results.xml
            oscap-results-remediated.html

      - name: üöÄ Commit and Push Compliance Reports
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Fetch the compliance-reports branch specifically
          git fetch origin compliance-reports

          # Create the reports directory if it doesn't exist
          mkdir -p reports/${{ github.ref_name }}

          # Move the newly generated reports
          mv oscap-results.html reports/${{ github.ref_name }}/oscap-results.html
          mv oscap-results.xml reports/${{ github.ref_name }}/oscap-results.xml
          mv oscap-results-remediated.html reports/${{ github.ref_name }}/oscap-results-remediated.html

          # Checkout the compliance-reports branch to access existing reports
          if git show-ref --quiet refs/heads/compliance-reports; then
            git checkout compliance-reports
          else
            git checkout --orphan compliance-reports
          fi

          # Copy existing reports into the current working directory
          if [ -d "reports" ]; then
            cp -r reports/. .
          fi

          # Add the new reports (overwriting if names are the same)
          mv reports/${{ github.ref_name }}/* reports/

          # Add all files in the reports directory
          git add reports/*

          if git diff --staged --quiet; then
            echo "No changes to commit in compliance reports."
          else
            git commit -m "Update OpenSCAP compliance reports for branch ${{ github.ref_name }}"
            git push origin compliance-reports
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üöÄ Push Remediated Docker Image
        run: |
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USER }}" --password-stdin
          docker tag $DOCKER_REPO:${GITHUB_REF_NAME}-remediated $DOCKER_REPO:${GITHUB_REF_NAME}
          docker push $DOCKER_REPO:${GITHUB_REF_NAME}
